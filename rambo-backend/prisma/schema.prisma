// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma client generator
generator client {
  provider = "prisma-client-js"
}

// Enum definitions
enum UserRole {
  ADMIN
  MANAGER
  DEVELOPER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum WorkflowNodeType {
  START
  END
  TASK
  DECISION
  PARALLEL
  SUBPROCESS
}

// User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  role          UserRole  @default(DEVELOPER)
  profile       Profile?
  projects      Project[] @relation("ProjectOwner")
  assignedTasks Task[]    @relation("AssignedTasks")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// User Profile Model
model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String
  avatarUrl   String?
  bio         String?
  preferences Json?
}

// Project Model
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     String
  tasks       Task[]
  workflows   Workflow[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Task Model
model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?       @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  metadata    Json?
  comments    TaskComment[]
  attachments TaskAttachment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Task Comment Model
model TaskComment {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

// Task Attachment Model
model TaskAttachment {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  fileName  String
  fileUrl   String
  fileType  String
  uploadedAt DateTime @default(now())
}

// Workflow Model
model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  nodes       WorkflowNode[]
  edges       WorkflowEdge[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Workflow Node Model
model WorkflowNode {
  id            String           @id @default(cuid())
  workflow      Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId    String
  type          WorkflowNodeType
  name          String
  description   String?
  configuration Json?
  incomingEdges WorkflowEdge[]   @relation("EdgeTarget")
  outgoingEdges WorkflowEdge[]   @relation("EdgeSource")
}

// Workflow Edge Model (Connections between nodes)
model WorkflowEdge {
  id        String       @id @default(cuid())
  workflow  Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  source    WorkflowNode @relation("EdgeSource", fields: [sourceId], references: [id])
  sourceId  String
  target    WorkflowNode @relation("EdgeTarget", fields: [targetId], references: [id])
  targetId  String
  condition String?
}

// Agent Model
model Agent {
  id            String   @id @default(cuid())
  name          String
  type          String
  description   String?
  capabilities  Json
  configuration Json
  status        String   @default("INACTIVE")
  lastRunAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Audit Log Model
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  details   Json?
  createdAt DateTime @default(now())
}
