generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Add all model definitions with proper relations
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String @default("PLANNING")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  tasks       Task[]
  workflows   Workflow[]
  files       File[]
  tickets     Ticket[]
  requirements Requirement[]
  sprints     Sprint[]

  @@map("projects")
  @@index([ownerId])
  @@index([isDeleted])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String @default("TODO")
  priority    Int        @default(3)
  startDate   DateTime?
  dueDate     DateTime?
  estimatedHours Float?
  actualHours  Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean    @default(false)
  deletedAt   DateTime?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  workflow    Workflow?  @relation(fields: [workflowId], references: [id])
  workflowId  String?
  agent       Agent?     @relation(fields: [agentId], references: [id])
  agentId     String?
  parentTask  Task?      @relation("SubTasks", fields: [parentId], references: [id])
  parentId    String?
  subTasks    Task[]     @relation("SubTasks")
  logs        TaskLog[]
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependentTasks TaskDependency[] @relation("DependsOnTasks")

  @@map("tasks")
  @@index([projectId])
  @@index([assigneeId])
  @@index([workflowId])
  @@index([isDeleted])
}

model File {
  id        String   @id @default(cuid())
  name      String
  path      String
  size      Int
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String

  @@map("files")
}

model WorkflowEdge {
  id        String   @id @default(cuid())
  condition String?
  fromNode  WorkflowNode @relation("edgesOut", fields: [fromNodeId], references: [id])
  fromNodeId String
  toNode    WorkflowNode @relation("edgesIn", fields: [toNodeId], references: [id])
  toNodeId   String
  workflow  Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  @@map("workflow_edges")
}

model Ticket {
  id          String          @id @default(cuid())
  title       String
  description String?
  type        String
  priority    String
  status      String
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String
  assignee    User?           @relation("AssignedTickets", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User            @relation("ReportedTickets", fields: [reporterId], references: [id])
  reporterId  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("tickets")
  @@index([projectId])
  @@index([assigneeId])
  @@index([reporterId])
}

model Requirement {
  id          String            @id @default(cuid())
  title       String
  description String
  type        String
  status      String
  project     Project           @relation(fields: [projectId], references: [id])
  projectId   String
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("requirements")
  @@index([projectId])
  @@index([createdById])
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  password          String
  role              UserRole @default(VIEWER)
  firstName         String?
  lastName          String?
  profilePictureUrl String?
  lastLogin         DateTime?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isDeleted         Boolean       @default(false)
  deletedAt         DateTime?
  
  projects          Project[]
  tasks             Task[]
  files             File[]
  assignedTickets   Ticket[]      @relation("AssignedTickets")
  reportedTickets   Ticket[]      @relation("ReportedTickets")
  requirements      Requirement[]
  workflowExecutions WorkflowExecution[]

  @@map("users")
  @@index([email])
  @@index([isActive])
  @@index([isDeleted])
}

model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      String @default("DRAFT")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDeleted   Boolean        @default(false)
  deletedAt   DateTime?
  project     Project        @relation(fields: [projectId], references: [id])
  projectId   String
  tasks       Task[]
  nodes       WorkflowNode[]
  edges       WorkflowEdge[]
  executions  WorkflowExecution[]

  @@map("workflows")
  @@index([projectId])
  @@index([isDeleted])
}

model WorkflowNode {
  id        String   @id @default(cuid())
  type      String
  config    String
  workflow  Workflow @relation(fields: [workflowId], references: [id])
  workflowId String
  edgesOut  WorkflowEdge[] @relation("edgesOut")
  edgesIn   WorkflowEdge[] @relation("edgesIn")
  executions WorkflowNodeExecution[]

  @@map("workflow_nodes")
}

model WorkflowExecution {
  id          String       @id @default(cuid())
  workflow    Workflow     @relation(fields: [workflowId], references: [id])
  workflowId  String
  status      String @default("PENDING")
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  nodes       WorkflowNodeExecution[]
  logs        ExecutionLog[]

  @@map("workflow_executions")
  @@index([workflowId])
  @@index([createdById])
}

model WorkflowNodeExecution {
  id          String       @id @default(cuid())
  execution   WorkflowExecution @relation(fields: [executionId], references: [id])
  executionId String
  node        WorkflowNode @relation(fields: [nodeId], references: [id])
  nodeId      String
  status      String @default("PENDING")
  startedAt   DateTime?
  completedAt DateTime?
  result      String?
  error       String?
  logs        ExecutionLog[]

  @@map("workflow_node_executions")
  @@index([executionId])
  @@index([nodeId])
}

model ExecutionLog {
  id          String       @id @default(cuid())
  message     String
  level       String       @default("INFO")
  data        String?
  timestamp   DateTime     @default(now())
  execution   WorkflowExecution? @relation(fields: [executionId], references: [id])
  executionId String?
  nodeExecution WorkflowNodeExecution? @relation(fields: [nodeExecutionId], references: [id])
  nodeExecutionId String?

  @@map("execution_logs")
  @@index([executionId])
  @@index([nodeExecutionId])
  @@index([timestamp])
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  type        String
  config      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]

  @@map("agents")
}

model TaskLog {
  id        String   @id @default(cuid())
  message   String
  data      String?
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())

  @@map("task_logs")
  @@index([taskId])
}

model TaskDependency {
  id          String   @id @default(cuid())
  task        Task     @relation("TaskDependencies", fields: [taskId], references: [id])
  taskId      String
  dependsOn   Task     @relation("DependsOnTasks", fields: [dependsOnId], references: [id])
  dependsOnId String

  @@map("task_dependencies")
  @@index([taskId])
  @@index([dependsOnId])
}

model Sprint {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sprints")
  @@index([projectId])
}
